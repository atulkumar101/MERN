
ES6 ECMAScript 6 ECMAScript 2015
Features
--------

arrows
let + const

enhanced object literals
template strings
destructuring
default + rest + spread


unicode

proxies
symbols
subclassable built-ins

math + number + string + array + object APIs
binary and octal literals
reflect api
tail calls




Objects
Destructing
String Interpolation
Default
Spread
Module Loaders
New Library
Promises
Proxies


1. Let & Const
2. Default Parameter Values
3. Arrow Functions
4. Rest Parameter & Spread Operator  
5. Exponentiation Operator (**) 
6.

Enhanced Object Property
var x = 0, y = 0
obj = { x, y }

Destructuring Assignment
var list = [ 1, 2, 3 ]
var [ a, , b ] = list
[ b, a ] = [ a, b ]


var obj = { a: 1 }
var list = [ 1 ]
var { a, b = 2 } = obj
var [ x, y = 2 ] = list;


9.


//Array.find()
//The find() method returns the value of the first array 
//element that passes a test function.

var numbers = [4, 9, 16, 25, 29];
var first = numbers.find(myFunction);

function myFunction(value, index, array) {
    return value > 18;
}
//First number over 18 is 25


//Array.findIndex()
//The findIndex() method returns the index of the first array 
//element that passes a test function.
var numbers = [4, 9, 16, 25, 29];
var first = numbers.findIndex(myFunction);

function myFunction(value, index, array) {
    return value > 18;
}
//First number over 18 has index 3



//New Number Properties
var x = Number.EPSILON;
var x = Number.MIN_SAFE_INTEGER;
var x = Number.MAX_SAFE_INTEGER;


//New Number Methods
Number.isInteger(10);        // returns true
Number.isInteger(10.5);      // returns false


//The Number.isInteger() method returns true if the argument is an integer.
Number.isSafeInteger(10);    // returns true
//A safe integer is an integer that can be exactly represented as a double precision number.
Number.isSafeInteger(12345678901234567890);  // returns false
//Safe integers are all integers from -(253 - 1) to +(253 - 1).
//This is safe: 9007199254740991. This is not safe: 9007199254740992.


//New Global Methods
//The global isFinite() method returns false if the argument is Infinity or NaN.
isFinite(10/0);       // returns false
isFinite(10/1);       // returns true
//The global isNaN() method returns true if the argument is NaN. Otherwise it returns false:
isNaN("Hello");       // returns true