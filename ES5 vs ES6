ES6

Browser Support
Chrome 58 Jan 2017
Edge 14 Aug 2016
Firefox 54 Mar 2017
Safari 10 Jul 2016
Opera 55 Aug 2018


ES5

Browser Support
Chrome 23 - Sep 2012
IE10/Edge - Sep 2012
Firefox 21 - Apr 2013
Safari 6 - Jul 2012
Opera 15 - Jul 2013






1997
ES5 ECMAScript 5 ECMAScript 2009

Features
--------
The "use strict" Directive
String.trim()
Array.isArray()
Array.forEach()
Array.map()
Array.filter()
Array.reduce()
Array.reduceRight()
Array.every()
Array.some()
Array.indexOf()
Array.lastIndexOf()
JSON.parse()
JSON.stringify()
Date.now()
Property Getters and Setters

Changes
-------
Property access [ ] on strings
Trailing commas in array and object literals
Multiline string literals
Reserved words as property names

ES6 ECMAScript 6 ECMAScript 2015
Features
--------
Arrows
Objects
Classes
Destructing
String Interpolation
Default
Spread
Module Loaders
Weak set
Map
New Library
Promises
Proxies


/*
1. let
The let statement allows you to declare a variable with block scope.
*/
var x = 10;
// x is 10
{ 
    let x = 2;
		// x is 2
}
// x is 10




/*
2. const
The const statement allows you to declare a constant 
(a JavaScript variable with a constant value).
*/
var x = 10;
// Here x is 10
{ 
    const x = 2;
    // Here x is 2
}
// Here x is 10




/*
3. Default Parameter Values
ES6 allows function parameters to have default values.
*/
function myFunction(x, y = 10) {
    // y is 10 if not passed or undefined
    return x + y;
}
myFunction(5); // will return 15



/*
4. Arrow Functions 
Arrow functions allows a short syntax for writing function expressions.
*/
// ES5
var a = function(x, y) {
     return x * y;
}

// ES6
const b = (x, y) => x * y;

/*
Arrow functions do not have their own this. They are not well suited for defining object methods.

Arrow functions are not hoisted. They must be defined before they are used.

Using const is safer than using var, because a function expression is always constant value.

You can only omit the return keyword and the curly brackets if the function is a single statement. Because of this, it might be a good habit to always keep them:
*/




















/*
//Exponentiation Operator
//The exponentiation operator (**) raises the first operand to the 
//power of the second operand.
var x = 5;
var z = x ** 2;          
// result is 25
//Math.pow(x,2); 
*/







//New Number Properties
var x = Number.EPSILON;
var x = Number.MIN_SAFE_INTEGER;
var x = Number.MAX_SAFE_INTEGER;


//New Number Methods
Number.isInteger(10);        // returns true
Number.isInteger(10.5);      // returns false


//The Number.isInteger() method returns true if the argument is an integer.
Number.isSafeInteger(10);    // returns true
//A safe integer is an integer that can be exactly represented as a double precision number.
Number.isSafeInteger(12345678901234567890);  // returns false
//Safe integers are all integers from -(253 - 1) to +(253 - 1).
//This is safe: 9007199254740991. This is not safe: 9007199254740992.


//New Global Methods
//The global isFinite() method returns false if the argument is Infinity or NaN.
isFinite(10/0);       // returns false
isFinite(10/1);       // returns true
//The global isNaN() method returns true if the argument is NaN. Otherwise it returns false:
isNaN("Hello");       // returns true








//Array.find()
//The find() method returns the value of the first array 
//element that passes a test function.

var numbers = [4, 9, 16, 25, 29];
var first = numbers.find(myFunction);

function myFunction(value, index, array) {
    return value > 18;
}
//First number over 18 is 25


//Array.findIndex()
//The findIndex() method returns the index of the first array 
//element that passes a test function.
var numbers = [4, 9, 16, 25, 29];
var first = numbers.findIndex(myFunction);

function myFunction(value, index, array) {
    return value > 18;
}
//First number over 18 has index 3






























 
