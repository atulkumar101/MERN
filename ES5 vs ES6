let+const
var a = 10; 
var b = 20;
{
  let a = 30
  const b =40;
}

Template Strings / Interpolation
--------------------------------
embedded expressions

`line1 
${a+b}
line2`

'line1\n' +
a+b + '\n' +
'line 2'

Destructuring
-------------
unpack values from arrays, or properties from objects, into distinct variables
var [a, b, ...rest] = [10, 20, 30, 40, 50];

[a=5, b=7] = [1]; //undefined
[a, b] = [b, a];

var ({a, b, ...rest} = {a: 10, b: 20, c: 30, d: 40});

to be continue;

default + rest + spread   
-----------------------
initialized with default values if no value or undefined is passed;

function multiply(a, b=1) {
	return a*b;
}
//b = (typeof b !== 'undefined') ?  b : 1;
console.log(multiply(5,2));
console.log(multiply(5));


Enhanced Object Literals
var x = 0, y = 0
obj = { x, y }




ES6 ECMAScript 6 ECMAScript 2015
Features
--------

arrows

unicode

proxies
symbols
subclassable built-ins

math + number + string + array + object APIs
binary and octal literals
reflect api
tail calls



//Array.find()
//The find() method returns the value of the first array 
//element that passes a test function.

var numbers = [4, 9, 16, 25, 29];
var first = numbers.find(myFunction);

function myFunction(value, index, array) {
    return value > 18;
}
//First number over 18 is 25


//Array.findIndex()
//The findIndex() method returns the index of the first array 
//element that passes a test function.
var numbers = [4, 9, 16, 25, 29];
var first = numbers.findIndex(myFunction);

function myFunction(value, index, array) {
    return value > 18;
}
//First number over 18 has index 3



//New Number Properties
var x = Number.EPSILON;
var x = Number.MIN_SAFE_INTEGER;
var x = Number.MAX_SAFE_INTEGER;


//New Number Methods
Number.isInteger(10);        // returns true
Number.isInteger(10.5);      // returns false


//The Number.isInteger() method returns true if the argument is an integer.
Number.isSafeInteger(10);    // returns true
//A safe integer is an integer that can be exactly represented as a double precision number.
Number.isSafeInteger(12345678901234567890);  // returns false
//Safe integers are all integers from -(253 - 1) to +(253 - 1).
//This is safe: 9007199254740991. This is not safe: 9007199254740992.


//New Global Methods
//The global isFinite() method returns false if the argument is Infinity or NaN.
isFinite(10/0);       // returns false
isFinite(10/1);       // returns true
//The global isNaN() method returns true if the argument is NaN. Otherwise it returns false:
isNaN("Hello");       // returns true