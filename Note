trim: true;
lowercase: true;
type:mongoose.Schema.Types.ObjectId
ref:

enum:
default:


var validator = require('validator');
validate:(value) => {
 return validator,isEmail(value)
}


find()                   // find all users
         .skip(100)                // skip the first 100 items
         .limit(10)                // limit to 10 items
         .sort({firstName: 1}      // sort ascending by firstName
         .select({firstName: true} // select firstName only



var mongoose = require("mongoose");
mongoose.connect("mongodb://localhost/db");






var mongoose = require("mongoose");
var Schema = mongoose.Schema;

var userSchema = new Schema({
 meta: 
})

userSchema.methods.f = function() {
 this.name = this.name+'';
return this.name;
}

var User = mongoose.model('User', userSchema);

module.exports = User;





c
var User = require();
var temp = new  User({
 meta: 
})
temp.f(funtion(err,name) {
 if(err) throw err;
});
temp.save(function(err)) {
 if(err) throw err;
}

r
User.find({}, function(err,users) {
 if(err) throw err;
})

User.find({username: ''}, function(err, user) {
 if(err) throw err;

})

User.findById(1, function(err.user) {
 if(err) throw error;

})
query
User.find({}).where('').gt('').exec(function(err, users) {
if(err) throw err;
})


update
User.findById(1, function( err, user) {
if(err) throw err;
user.name='';
user.save=(function(err){
if(err) throw err;
})
})

User.findOneAndUpdate({username:''}, {username: ''}, function(err, user) {
 if(err) throw err;
})

User.findByIdAndUpdate(4,{username:''}, function(err, user){
if(err) throw err;

})




Delete
User.find({username=''}, function(err,user) {
if(err) throw err;
 
user.remove(function(err) {
if(err) throw err;
})
})


User.findOneAndRemove({username=''}, function(err) {
if(err) throw err;
})


User.findByIdAndRemove(4, function(err) {
if(err) throw err;
});



userSchema.pre('save',funtion(next) {
 if(!this.)
 {}
next();
});
